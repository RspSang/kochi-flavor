// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  avatar     String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  navis      Navi[]
  answers    Answer[]
  wonderings Wondering[]
  reviews    Review[]
  wants      Want[]
  wents      Went[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id              Int      @id @default(autoincrement())
  name            String
  description     String   @db.MediumText
  latitude        String
  longitude       String
  image           String
  location_string String
  website         String
  phone           String
  address         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  reviews         Review[]
  wants           Want[]
  wents           Went[]
}

model Navi {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  latitude   Float?
  longitude  Float?
  answers    Answer[]
  wonderings Wondering[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  navi      Navi     @relation(fields: [naviId], references: [id], onDelete: Cascade)
  naviId    Int
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  navi      Navi     @relation(fields: [naviId], references: [id], onDelete: Cascade)
  naviId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id           Int        @id @default(autoincrement())
  review       String     @db.MediumText
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Want {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Went {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
